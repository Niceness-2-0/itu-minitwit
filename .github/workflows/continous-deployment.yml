---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
      - talha
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

permissions:
  contents: write # Needed for git tag and release
jobs:
  #  build:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #
  #      - name: Login to Docker Hub
  #        uses: docker/login-action@v3
  #        with:
  #          username: ${{ secrets.DOCKER_USERNAME }}
  #          password: ${{ secrets.DOCKER_PASSWORD }}
  #
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v3
  #
  #      - name: Build and push web
  #        uses: docker/build-push-action@v6
  #        with:
  #          context: .
  #          file: ./Dockerfile-web
  #          push: true
  #          tags: ${{ secrets.DOCKER_USERNAME }}/web:latest
  #          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web:webbuildcache
  #          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web:webbuildcache,mode=max
  #
  #      - name: Build and push api
  #        uses: docker/build-push-action@v6
  #        with:
  #          context: .
  #          file: ./Dockerfile-api
  #          push: true
  #          tags: ${{ secrets.DOCKER_USERNAME }}/api:latest
  #          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api:webbuildcache
  #          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api:webbuildcache,mode=max
  #
  #      - name: Build and push promtail
  #        uses: docker/build-push-action@v6
  #        with:
  #          context: .
  #          file: ./Dockerfile-logging
  #          push: true
  #          tags: ${{ secrets.DOCKER_USERNAME }}/promtail:latest
  #          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/promtail:webbuildcache
  #          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/promtail:webbuildcache,mode=max

  test:
    runs-on: ubuntu-latest
    # TODO TEST PURPOSES --> REMOVE    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure SSH for testing
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no
          '/test/test.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Wait for API to become ready
        run: |
          for i in {1..10}; do
            curl -s http://${{ vars.TEST_IP }}:5001/health && break
            echo "Waiting for API..."
            sleep 3
          done

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y python3-tk python3-dev

      - name: Install test dependencies
        run: |
          pip install -r API/tests/requirements.txt || true
          pip install -r go-project/tests/requirements.txt || true
      - name: Install Xvfb and tkinter
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb python3-tk
          Xvfb :99 & export DISPLAY=:99 & echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run tests
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ secrets.TEST_DB_USER}}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          DB_NAME: ${{ vars.TEST_DB_NAME }}
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PWD: ${{ secrets.TEST_PWD }}
          TEST_IP: ${{ vars.TEST_IP }}
          API_BASE_URL: ${{ vars.TEST_IP }}
          GUI_URL: ${{ vars.GUI_URL }}
        run: |
          pytest API/tests/minitwit_sim_api_test.py
          python go-project/tests/seleniumtests.py

#  deploy:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure SSH for deployment
#        run: |
#          mkdir -p ~/.ssh/
#          echo "$PROD_SSH_KEY" > ~/.ssh/id_ed25519
#          chmod 600 ~/.ssh/id_ed25519
#        env:
#          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
#
#      - name: Deploy to server
#        run: >
#          ssh $PROD_SSH_USER@$PROD_SSH_HOST
#          -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no
#          'source server-files/deploy.sh'
#        env:
#          PROD_SSH_USER: ${{ secrets.PROD_SSH_USER }}
#          PROD_SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
#  release:
#    needs: deploy
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Read version from file
#        id: version
#        run: echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"
#
#      - name: Set up Git
#        run: |
#          git config --global user.name "github-actions"
#          git config --global user.email "github-actions@github.com"
#
#      - name: Create and push git tag
#        run: |
#          git tag ${{ steps.version.outputs.version }}
#          git push origin ${{ steps.version.outputs.version }}
#
#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: ${{ steps.version.outputs.version }}
#          name: Release ${{ steps.version.outputs.version }}
#          generate_release_notes: true
#          body: |
#            Automated release for version ${{ steps.version.outputs.version }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
