---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push web
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-web
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/web:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web:webbuildcache,mode=max

      - name: Build and push api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/api:webbuildcache,mode=max

      - name: Build and push promtail
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-logging
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/promtail:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/promtail:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/promtail:webbuildcache,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure SSH for testing
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no
          '/test/test.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Wait for API to become ready
        run: |
          for i in {1..10}; do
            curl -s http://${{ vars.TEST_IP }}:5001/health && break
            echo "Waiting for API..."
            sleep 3
          done

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install test dependencies
        run: |
          pip install -r requirements.txt || true
          pip install pytest
          pip install psycopg2-binary requests python-dotenv

      - name: Run tests
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ secrets.TEST_DB_USER}}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          DB_NAME: ${{ vars.TEST_DB_NAME }}
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PWD: ${{ secrets.TEST_PWD }}
          TEST_IP: ${{ vars.TEST_IP }}
        run: |
          pytest API/tests/minitwit_sim_api_test.py

  #deploy:
  #  needs: test
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v2

#
#    - name: Configure SSH for deployment
#      run: |
#        mkdir -p ~/.ssh/
#        echo "$SSH_KEY" > ~/.ssh/id_ed25519
#        chmod 600 ~/.ssh/id_ed25519
#      env:
#        SSH_KEY: ${{ secrets.SSH_KEY }}
#
#    - name: Deploy to server
#      run: >
#        ssh $SSH_USER@$SSH_HOST
#        -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no
#        '/test/deploy.sh'
#      env:
#        SSH_USER: ${{ secrets.SSH_USER }}
#        SSH_HOST: ${{ secrets.SSH_HOST }}
